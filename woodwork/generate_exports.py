from typing import Set
from woodwork.registry import get_registry
import importlib.resources as pkg_resources


def get_import_path(obj) -> str:
    """Returns module path of the object's class, e.g. 'woodwork.components.llm"""
    return obj.__class__.__module__


def generate_exported_objects_file(registry=None) -> None:
    if registry is None:
        registry = get_registry()

    # Gather unique imports (module -> set of class names)
    imports: dict[str, Set[str]] = {}

    variables = []

    for name in registry._registry.keys():
        comp = registry.get(name)
        mod = get_import_path(comp)
        cls_name = comp.__class__.__name__
        imports.setdefault(mod, set()).add(cls_name)
        variables.append((name, cls_name))

    with open(pkg_resources.files("woodwork") / "exports.py", "w") as f:
        f.write("# Auto-generated by generate_exported_objects_file()\n\n")

        # Write imports
        for mod, classes in imports.items():
            classes_list = ", ".join(sorted(classes))
            f.write(f"from {mod} import {classes_list}\n")
        f.write("\n")

        # Write registry import and get_registry call
        f.write("from woodwork.registry import get_registry\n")
        f.write("from woodwork.config_parser import main_function\n\n")
        f.write("main_function()\n")
        f.write("registry = get_registry()\n\n")

        # Write variables fetching from registry
        for name, cls_name in variables:
            f.write(f"{name}: {cls_name} = registry.get('{name}')\n")

        # Optionally define __all__
        all_names = ", ".join(f"'{name}'" for name, _ in variables)
        f.write(f"\n__all__ = [{all_names}]\n")
